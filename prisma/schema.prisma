// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth
  password      String?   // Hashed password for email/password auth
  accounts      Account[]
  sessions      Session[]
  passwordResets PasswordReset[]

  // Notification Preferences
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(false)
  pushSubscription  String? @db.Text // Web Push subscription data
  alertThresholds   Json?   // Custom thresholds for different alert types
  notifyFrequency   String  @default("immediate") // immediate, daily, weekly
  monitoredConditions Json? // Which weather conditions to monitor

  // Profile & Subscription
  subscription  Subscription?
  lawnProfiles  LawnProfile[]
  schedules     Schedule[]
  payments      Payment[]
  notifications Notification[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // weather, schedule, system
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   // Hashed reset token
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LawnProfile {
  id            String    @id @default(cuid())
  userId        String
  name          String    // e.g. "Front Yard", "Back Yard"
  size          Float     // Size in square feet
  grassType     String    // e.g. "Bermuda", "Kentucky Bluegrass"
  soilType      String    // e.g. "Clay", "Sandy", "Loam"
  sunExposure   String    // e.g. "Full Sun", "Partial Shade", "Full Shade"
  irrigation    Boolean   // Has irrigation system
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  latitude      Float?    // Latitude for precise weather data
  longitude     Float?    // Longitude for precise weather data
  timezone      String?   // Local timezone for accurate scheduling
  notes         String?   @db.Text

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules     Schedule[]
}

model Schedule {
  id            String    @id @default(cuid())
  userId        String
  lawnProfileId String
  name          String
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lawnProfile   LawnProfile @relation(fields: [lawnProfileId], references: [id], onDelete: Cascade)
  treatments    Treatment[]
}

model Treatment {
  id              String    @id @default(cuid())
  scheduleId      String
  type            String    // e.g. "Fertilization", "Weed Control", "Mowing"
  date            DateTime
  completed       Boolean   @default(false)
  effectiveness   Int?      // Scale of 1-5
  weatherScore    Int?      // Weather suitability score 1-5
  actualDuration  Int?      // Actual duration in minutes
  notes           String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  schedule        Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  weatherData     WeatherCondition?
  weatherAlerts   WeatherAlert[]
}

model WeatherAlert {
  id                String    @id @default(cuid())
  treatmentId       String
  type              String    // temperature, wind, precipitation, conditions
  severity          String    // warning, critical
  message           String
  suggestedDate     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Notification tracking
  emailSent         Boolean   @default(false)
  emailSentAt       DateTime?
  pushSent          Boolean   @default(false)
  pushSentAt        DateTime?
  readAt            DateTime?
  actionTaken       String?   // dismissed, rescheduled, acknowledged

  treatment         Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
  notifications     NotificationHistory[]
}

model NotificationHistory {
  id            String    @id @default(cuid())
  alertId       String
  type          String    // email, push
  status        String    // sent, failed, delivered, clicked
  error         String?
  sentAt        DateTime  @default(now())
  deliveredAt   DateTime?
  
  alert         WeatherAlert @relation(fields: [alertId], references: [id], onDelete: Cascade)
}

model WeatherCondition {
  id              String    @id @default(cuid())
  treatmentId     String    @unique
  temperature     Float
  humidity        Float
  precipitation   Float
  windSpeed      Float
  conditions     String    // e.g. "Clear", "Rain", "Cloudy"
  forecast       Json?     // Stored forecast data
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  treatment      Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String    @unique
  stripeId      String?   @unique // Stripe subscription ID
  status        String    // active, canceled, past_due
  plan          String    // free, basic, pro
  startDate     DateTime  @default(now())
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments      Payment[]
}

model Payment {
  id              String    @id @default(cuid())
  userId          String
  subscriptionId  String
  stripeId        String?   // Stripe payment intent ID
  amount          Float
  currency        String
  status          String    // succeeded, pending, failed
  createdAt       DateTime  @default(now())

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}
