// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Enable Edge runtime compatibility
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth
  password      String?   // Hashed password for email/password auth
  accounts      Account[]
  sessions      Session[]
  passwordResets PasswordReset[]

  // Enhanced User Management
  profile       UserProfile?
  preferences   UserPreferences?
  settings      AccountSettings?
  loginHistory  LoginRecord[]

  // Notification Preferences
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(false)
  pushSubscription  String? @db.Text // Web Push subscription data
  alertThresholds   Json?   // Custom thresholds for different alert types
  notifyFrequency   String  @default("immediate") // immediate, daily, weekly
  monitoredConditions Json? // Which weather conditions to monitor

  // Profile & Subscription
  subscription  Subscription?
  lawnProfiles  LawnProfile[]
  schedules     Schedule[]
  payments      Payment[]
  notifications Notification[]

  @@index([email])
}

model UserProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  displayName       String?
  bio               String?   @db.Text
  location          String?
  website           String?
  phoneNumber       String?
  profession        String?
  organization      String?
  expertise         String[]  // lawn care specialties
  certifications    String[]  // professional certifications
  privacySettings   Json      // profile visibility settings
  socialLinks       Json?     // social media profiles
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Profile Image
  avatarUrl         String?
  avatarThumbnail   String?
  coverImage        String?

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserPreferences {
  id                String    @id @default(cuid())
  userId            String    @unique
  theme             String    @default("system") // light, dark, system
  language          String    @default("en")
  timezone          String
  dateFormat        String    @default("MM/DD/YYYY")
  timeFormat        String    @default("12h") // 12h, 24h
  measurementSystem String    @default("imperial") // imperial, metric
  accessibility     Json?     // accessibility preferences
  dashboardLayout   Json?     // customized dashboard layout
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AccountSettings {
  id                String    @id @default(cuid())
  userId            String    @unique
  
  // Email Settings
  primaryEmail      String    // same as user.email
  backupEmail       String?   // secondary contact
  emailVerified     Boolean   @default(false)
  
  // Security Settings
  twoFactorEnabled  Boolean   @default(false)
  twoFactorMethod   String?   // app, sms, email
  twoFactorSecret   String?   // encrypted 2FA secret
  passwordLastChanged DateTime?
  securityQuestions Json?     // encrypted security QA
  
  // Communication Preferences
  marketingEmails   Boolean   @default(true)
  serviceUpdates    Boolean   @default(true)
  securityAlerts    Boolean   @default(true)
  
  // Session Settings
  sessionTimeout    Int       @default(30) // minutes
  maxSessions       Int       @default(5)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model LoginRecord {
  id                String    @id @default(cuid())
  userId            String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  userAgent         String?
  device            String?
  location          String?   // Geo location
  status            String    // success, failed, blocked
  failureReason     String?   // if status is failed/blocked
  sessionId         String?   // associated session if successful

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // weather, schedule, system
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   // Hashed reset token
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GrassSpecies {
  id                String    @id @default(cuid())
  name              String    // e.g. "Kentucky Bluegrass"
  scientificName    String    // e.g. "Poa pratensis"
  type              String    // cool-season, warm-season
  characteristics   Json      // growth patterns, appearance, etc.
  idealConditions   Json      // soil, climate, sun exposure
  maintenance       Json      // mowing height, water needs, etc.
  commonMixes       String[]  // species it commonly mixes well with
  
  // Image fields
  mainImage         String?   // URL to primary species image
  images            String[]  // Additional image URLs (growth stages, diseases, etc.)
  imageDescriptions Json?     // Metadata for images (descriptions, categories, etc.)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  lawnProfiles      LawnGrassComposition[]
  treatments        SpeciesTreatment[]
  citations         ResearchCitation[]
}

model LawnProfile {
  id            String    @id @default(cuid())
  userId        String
  name          String    // e.g. "Front Yard", "Back Yard"
  size          Float     // Size in square feet
  soilType      String    // e.g. "Clay", "Sandy", "Loam"
  sunExposure   String    // e.g. "Full Sun", "Partial Shade", "Full Shade"
  irrigation    Boolean   // Has irrigation system
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  latitude      Float?    // Latitude for precise weather data
  longitude     Float?    // Longitude for precise weather data
  timezone      String?   // Local timezone for accurate scheduling
  notes         String?   @db.Text
  location      String?   // City, State

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules     Schedule[]
  grassSpecies  LawnGrassComposition[] @relation("LawnGrassComposition")
}

model LawnGrassComposition {
  id            String    @id @default(cuid())
  lawnProfileId String
  speciesId     String
  percentage    Int       // composition percentage
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  lawnProfile   LawnProfile   @relation("LawnGrassComposition", fields: [lawnProfileId], references: [id], onDelete: Cascade)
  species       GrassSpecies  @relation(fields: [speciesId], references: [id], onDelete: Cascade)

  @@unique([lawnProfileId, speciesId])
}

model TreatmentType {
  id            String    @id @default(cuid())
  name          String
  category      String    // fertilization, weed control, seeding, etc.
  description   String    @db.Text
  season        String[]  // spring, summer, fall, winter
  frequency     String    // once, monthly, seasonal, annual
  goals         String[]  // thicker grass, weed reduction, etc.
  conditions    Json      // required conditions for treatment
  instructions  String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  treatments        Treatment[]
  speciesTreatments SpeciesTreatment[]
  citations         ResearchCitation[]
}

model SpeciesTreatment {
  id            String    @id @default(cuid())
  speciesId     String
  treatmentId   String
  effectiveness Int       // 1-5 rating
  notes         String?   @db.Text
  evidence      Json      // research citations, success rates
  conditions    Json      // specific conditions for effectiveness
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  species       GrassSpecies    @relation(fields: [speciesId], references: [id], onDelete: Cascade)
  treatment     TreatmentType   @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  @@unique([speciesId, treatmentId])
}

model ResearchCitation {
  id            String    @id @default(cuid())
  title         String
  authors       String[]
  publication   String?
  year          Int
  doi           String?   // Digital Object Identifier
  url           String?
  summary       String    @db.Text
  methodology   String    @db.Text
  findings      Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  species       GrassSpecies[]
  treatments    TreatmentType[]
}

model Schedule {
  id              String    @id @default(cuid())
  userId          String
  lawnProfileId   String
  name            String
  startDate       DateTime
  endDate         DateTime?
  isRecurring     Boolean   @default(false)
  parentScheduleId String?  // For recurring schedule instances
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lawnProfile     LawnProfile @relation(fields: [lawnProfileId], references: [id], onDelete: Cascade)
  treatments      Treatment[]
  recurrencePattern RecurrencePattern? @relation("ScheduleRecurrence")
  parentSchedule  Schedule?   @relation("RecurringSchedules", fields: [parentScheduleId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  childSchedules  Schedule[]  @relation("RecurringSchedules")
}

model RecurrencePattern {
  id            String    @id @default(cuid())
  scheduleId    String    @unique
  frequency     String    // daily, weekly, monthly
  interval      Int       // every X days/weeks/months
  weekdays      Json?     // [1,3,5] for Mon,Wed,Fri
  monthDay      Int?      // day of month for monthly
  endType       String    // never, after_occurrences, on_date
  occurrences   Int?      // if endType is after_occurrences
  endDate       DateTime? // if endType is on_date
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  schedule      Schedule  @relation("ScheduleRecurrence", fields: [scheduleId], references: [id], onDelete: Cascade)
  exceptions    RecurrenceException[]
}

model RecurrenceException {
  id                  String    @id @default(cuid())
  recurrencePatternId String
  originalDate        DateTime
  newDate            DateTime?
  isCancelled        Boolean   @default(false)
  reason             String?   @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  recurrencePattern   RecurrencePattern @relation(fields: [recurrencePatternId], references: [id], onDelete: Cascade)
}
model Treatment {
  id                String    @id @default(cuid())
  scheduleId        String
  treatmentTypeId   String
  date              DateTime
  completed         Boolean   @default(false)
  
  // Basic tracking
  actualDuration    Int?      // Actual duration in minutes
  notes             String?   @db.Text
  
  // Evidence-based effectiveness tracking
  effectiveness     Int?      // Overall effectiveness (1-5)
  speciesResults    Json?     // Per-species effectiveness tracking
  conditionsScore   Int?      // How well conditions matched recommendations (1-5)
  adherenceScore    Int?      // How well treatment followed guidelines (1-5)
  weatherScore      Int?      // Weather suitability score (1-5)
  resultMetrics     Json?     // Measured results (e.g., grass density, weed count)
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  schedule          Schedule      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  treatmentType     TreatmentType @relation(fields: [treatmentTypeId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  weatherData       WeatherCondition?
  weatherAlerts   WeatherAlert[]
}

model WeatherAlert {
  id                String    @id @default(cuid())
  treatmentId       String
  type              String    // temperature, wind, precipitation, conditions
  severity          String    // warning, critical
  message           String
  suggestedDate     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Notification tracking
  emailSent         Boolean   @default(false)
  emailSentAt       DateTime?
  pushSent          Boolean   @default(false)
  pushSentAt        DateTime?
  readAt            DateTime?
  actionTaken       String?   // dismissed, rescheduled, acknowledged

  treatment         Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
  notifications     NotificationHistory[]
}

model NotificationHistory {
  id            String    @id @default(cuid())
  alertId       String
  type          String    // email, push
  status        String    // sent, failed, delivered, clicked
  error         String?
  sentAt        DateTime  @default(now())
  deliveredAt   DateTime?
  
  alert         WeatherAlert @relation(fields: [alertId], references: [id], onDelete: Cascade)
}

model WeatherCondition {
  id              String    @id @default(cuid())
  treatmentId     String    @unique
  temperature     Float
  humidity        Float
  precipitation   Float
  windSpeed      Float
  conditions     String    // e.g. "Clear", "Rain", "Cloudy"
  forecast       Json?     // Stored forecast data
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  treatment      Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
}

model Subscription {
  id            String    @id @default(cuid())
  userId        String    @unique
  stripeId      String?   @unique // Stripe subscription ID
  status        String    // active, canceled, past_due
  plan          String    // free, basic, pro
  startDate     DateTime  @default(now())
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments      Payment[]
}

model Payment {
  id              String    @id @default(cuid())
  userId          String
  subscriptionId  String
  stripeId        String?   // Stripe payment intent ID
  amount          Float
  currency        String
  status          String    // succeeded, pending, failed
  createdAt       DateTime  @default(now())

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model WeatherTrainingData {
  id              String    @id @default(cuid())
  weatherData     Json      // WeatherData object
  treatmentType   String    // Type of treatment
  effectiveness   Float     // 0-1 scale
  timestamp       DateTime  @default(now())
  
  // Metadata for ML
  dataQuality     Float?    // 0-1 scale
  confidence      Float?    // 0-1 scale
  validationScore Float?    // For model validation
  
  // Indexes for efficient querying
  @@index([treatmentType])
  @@index([timestamp])
}
